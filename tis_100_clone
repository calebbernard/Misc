import libtcodpy as libtcod
import shelve
# \30\31\32\33 = arrows
# 185 = right tee
# 186 = vertical
# 187 = top-right corner
# 188 = bottom-right corner
# 200 = bottom-left corner
# 201 = top-left corner
# 202 = bottom tee
# 203 = top tee
# 204 = left tee
# 205 = horizontal
# 206 = cross

# 179 = single vertical
# 180 = single right tee
# 191 = single top-right corner
# 192 = single bottom-left corner
# 193 = single bottom tee
# 194 = single top tee
# 195 = single left tee
# 196 = single horizontal
# 197 = single cross

# 176 = low patch
# 177 = medium patch
# 178 = full patch

size_x = 140
size_y = 74
libtcod.console_set_custom_font('consolas8x8_gs_tc.png', libtcod.FONT_TYPE_GREYSCALE | libtcod.FONT_LAYOUT_TCOD)
libtcod.console_init_root(size_x, size_y, 'TIS-100 Clone', False)
libtcod.sys_set_fps(30)

class Node:
    def __init__(self, x, y, number, disabled, read):
        self.number = number
        self.x = x
        self.y = y
        self.disabled = disabled
        self.text = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", ""]
        self.cursorPosX = 0
        self.cursorPosY = 0
        self.cursorSec = 0
        self.acc = 0
        self.bak = 0
        self.up = False
        self.down = False
        self.left = False
        self.right = False
        self.read = read

    def isTileMine(self, x, y):
        if x >= self.x + 1 and x <= self.x + 20 and y >= self.y + 1 and y <= self.y + 16:
            return True
        return False

    def click(self, x, y):
        relativeX = x - (self.x)
        relativeY = y - (self.y)
        self.goto(relativeX, relativeY)

    def goto(self, relativeX, relativeY):
        libtcod.console_set_char_background(0, self.x + self.cursorPosX, self.y + self.cursorPosY, libtcod.black, flag=libtcod.BKGND_SET)
        if relativeY < 1:
            relativeY = 1
        elif relativeY > 15:
            relativeY = 15
        if self.text[relativeY - 1] == "":
            last = 0
            furtherDown = False
            # If there's text further down, then it's ok
            for z in range (relativeY, 15):
                if self.text[z] != "":
                    furtherDown = True
            # If there's no text further down, retreat to last line with text
            if not furtherDown:
                for z in range (relativeY):
                    if self.text[z] != "":
                        last = z
                self.cursorPosY = last + 1
            else: self.cursorPosY = relativeY
        else:
            self.cursorPosY = relativeY
        if relativeX < 1:
            relativeX = 1
        elif relativeX > 18:
            relativeX = 18
        else:
            if len(self.text[self.cursorPosY - 1]) <= relativeX - 1:
                self.cursorPosX = len(self.text[self.cursorPosY - 1]) + 1
            else:
                self.cursorPosX = relativeX

    def addLetter(self, char):
        char = char.upper()
        if len(self.text[self.cursorPosY - 1]) <= 17:
            libtcod.console_set_char_background(0, self.x + self.cursorPosX, self.y + self.cursorPosY, libtcod.black, flag=libtcod.BKGND_SET)
            self.text[self.cursorPosY - 1] = (self.text[self.cursorPosY - 1][0:self.cursorPosX]) + char + (self.text[self.cursorPosY - 1][self.cursorPosX:])
            self.cursorPosX += 1

    def backspace(self):
        libtcod.console_set_char_background(0, self.x + self.cursorPosX, self.y + self.cursorPosY, libtcod.black, flag=libtcod.BKGND_SET)
        if self.cursorPosX >= 2:
            self.text[self.cursorPosY - 1] = self.text[self.cursorPosY - 1][0:self.cursorPosX - 2] + self.text[self.cursorPosY - 1][self.cursorPosX - 1:]
            self.cursorPosX -= 1
        else:
            if self.cursorPosY >= 2:
                self.cursorPosY -= 1
                self.cursorPosX = len(self.text[self.cursorPosY - 1]) + 1
                for x in range (self.cursorPosY, 14):
                    self.text[x] = self.text[x+1]
                    self.text[14] = ""

    def newline(self):
        libtcod.console_set_char_background(0, self.x + self.cursorPosX, self.y + self.cursorPosY, libtcod.black, flag=libtcod.BKGND_SET)
        if len(self.text[14]) == 0 and self.cursorPosY != 14:
            for x in reversed(range(self.cursorPosY + 1, 15)):
                self.text[x] = self.text[x-1]
            self.text[self.cursorPosY] = self.text[self.cursorPosY - 1][self.cursorPosX - 1:]
            self.text[self.cursorPosY - 1] = self.text[self.cursorPosY - 1][:self.cursorPosX - 1]
            self.cursorPosY += 1
            self.cursorPosX = 1

    def draw(self):
        box = [201, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 203, 205, 205, 205, 205, 205, 187,
                186, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 186,0,0,0,0,0,186,
                186, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 186,0,0,0,0,0,186,
                186, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 204,205,205,205,205,205,185,
                186, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 186,0,0,0,0,0,186,
                186, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 186,0,0,0,0,0,186,
                186, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 204,205,205,205,205,205,185,
                186, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 186,0,0,0,0,0,186,
                186, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 186,0,0,0,0,0,186,
                186, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 204,205,205,205,205,205,185,
                186, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 186,0,0,0,0,0,186,
                186, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 186,0,0,0,0,0,186,
                186, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 204,205,205,205,205,205,185,
                186, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 186,0,0,0,0,0,186,
                186, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 186,0,0,0,0,0,186,
                186, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 186,0,0,0,0,0,186,
                200, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 202, 205, 205, 205, 205, 205, 188,
                ]
        row = self.x
        col = self.y
        if self.disabled:
            libtcod.console_set_default_foreground(0, libtcod.red)
        else:
            libtcod.console_set_default_foreground(0, libtcod.white)
        for char in box:
            libtcod.console_put_char(0, row, col, char, libtcod.BKGND_NONE)
            row += 1
            if row >= 27 + self.x:
                row = self.x
                col += 1
        if self.disabled:
            for z in range(13):
                libtcod.console_put_char(0, self.x + z + 4, self.y + 5, 176, libtcod.BKGND_NONE)
                libtcod.console_put_char(0, self.x + z + 4, self.y + 10, 176, libtcod.BKGND_NONE)
                libtcod.console_print_ex(0, self.x + 4, self.y + 7, libtcod.BKGND_NONE, libtcod.LEFT, "COMMUNICATION")
                libtcod.console_print_ex(0, self.x + 7, self.y + 8, libtcod.BKGND_NONE, libtcod.LEFT, "FAILURE")
        else:
            for y in range(15):
                for x in range(len(self.text[y])):
                    libtcod.console_put_char(0, self.x + 1 + x, self.y + 1 + y, self.text[y][x], libtcod.BKGND_NONE)
        if self.right == False:
            libtcod.console_put_char(0, self.x + 29, self.y + 5, "\32", libtcod.BKGND_NONE)
        if self.left == False:
            libtcod.console_put_char(0, self.x - 3, self.y + 10, "\33", libtcod.BKGND_NONE)
        if self.up == False:
            libtcod.console_put_char(0, self.x + 15, self.y - 3, "\30", libtcod.BKGND_NONE)
        if self.down == False:
            libtcod.console_put_char(0, self.x + 9, self.y + 19, "\31", libtcod.BKGND_NONE)

        if not self.disabled:
            libtcod.console_set_default_foreground(0, libtcod.Color(150,150,150))
            libtcod.console_print_ex(0, self.x + 22, self.y + 1, libtcod.BKGND_NONE, libtcod.LEFT, "ACC")
            libtcod.console_print_ex(0, self.x + 22, self.y + 4, libtcod.BKGND_NONE, libtcod.LEFT, "BAK")
            libtcod.console_set_default_foreground(0, libtcod.white)
            libtcod.console_print_ex(0, self.x + 22, self.y + 2, libtcod.BKGND_NONE, libtcod.LEFT, str(self.acc))
            libtcod.console_print_ex(0, self.x + 22, self.y + 5, libtcod.BKGND_NONE, libtcod.LEFT, str(self.bak))
        if timeElapsed % 1 > .5 and focus == self.number and not self.disabled:
            libtcod.console_set_char_background(0, self.x + self.cursorPosX, self.y + self.cursorPosY, libtcod.white, flag=libtcod.BKGND_SET)
        else:
            libtcod.console_set_char_background(0, self.x + self.cursorPosX, self.y + self.cursorPosY, libtcod.black, flag=libtcod.BKGND_SET)

def clear_bg():
    for x in range(size_x):
        for y in range(size_y):
            libtcod.console_set_char_background(0, x, y, libtcod.black, flag=libtcod.BKGND_SET)


def drawInstructionBox(x, y):
    libtcod.console_put_char(0, x, y, 201, libtcod.BKGND_NONE)
    libtcod.console_put_char(0, x + 36, y, 187, libtcod.BKGND_NONE)
    libtcod.console_put_char(0, x, y + 8, 200, libtcod.BKGND_NONE)
    libtcod.console_put_char(0, x + 36, y + 8, 188, libtcod.BKGND_NONE)
    for z in range(35):
        libtcod.console_put_char(0, x+z+1, y, 205, libtcod.BKGND_NONE)
        libtcod.console_put_char(0, x+z+1, y+8, 205, libtcod.BKGND_NONE)
    for z in range(7):
        libtcod.console_put_char(0, x, y+z+1, 186, libtcod.BKGND_NONE)
        libtcod.console_put_char(0, x+36, y+z+1, 186, libtcod.BKGND_NONE)

def drawConsoleBox(x, y):
    libtcod.console_put_char(0, x, y, 201, libtcod.BKGND_NONE)
    libtcod.console_put_char(0, x + 6, y, 187, libtcod.BKGND_NONE)
    libtcod.console_put_char(0, x, y + 31, 204, libtcod.BKGND_NONE)
    libtcod.console_put_char(0, x + 6, y + 31, 185, libtcod.BKGND_NONE)
    libtcod.console_put_char(0, x + 6, y + 32, 186, libtcod.BKGND_NONE)
    libtcod.console_put_char(0, x, y + 32, 186, libtcod.BKGND_NONE)
    libtcod.console_put_char(0, x, y + 33, 200, libtcod.BKGND_NONE)
    libtcod.console_put_char(0, x + 6, y + 33, 188, libtcod.BKGND_NONE)
    libtcod.console_put_char(0, x + 1, y + 33, 205, libtcod.BKGND_NONE)
    libtcod.console_put_char(0, x + 2, y + 33, 205, libtcod.BKGND_NONE)
    libtcod.console_put_char(0, x + 3, y + 33, 205, libtcod.BKGND_NONE)
    libtcod.console_put_char(0, x + 4, y + 33, 205, libtcod.BKGND_NONE)
    libtcod.console_put_char(0, x + 5, y + 33, 205, libtcod.BKGND_NONE)
    for z in range(5):
        libtcod.console_put_char(0, x+z+1, y, 205, libtcod.BKGND_NONE)
        libtcod.console_put_char(0, x+z+1, y+31, 205, libtcod.BKGND_NONE)
    for z in range(30):
        libtcod.console_put_char(0, x, y+z+1, 186, libtcod.BKGND_NONE)
        libtcod.console_put_char(0, x+6, y+z+1, 186, libtcod.BKGND_NONE)

def initNodes():
    global nodes, focus
    focus = -1
    nodes = []
    number = 0
    row_y = [6, 28, 50]
    row_x = [15, 47, 79, 111]
    for y in row_y:
        for x in row_x:
            read = {}
            disabled = False
            if y != row_y[0]:
                read['up'] = number - 4
            else:
                read['up'] = None
            if x != row_x[0]:
                read['left'] = number - 1
            else:
                read['left'] = None
            if y != row_y[len(row_y) - 1]:
                read['down'] = number + 4
            else:
                read['down'] = None
            if x != row_x[len(row_x) - 1]:
                read['right'] = number + 1
            else:
                read['right'] = None
            nodes.append(Node(x, y, number, disabled, read))
            number += 1
    #drawInstructionBox(2, 4)
    drawConsoleBox(2, 17)

def play_game():
    global key, mouse, nodes, timeElapsed, focus
    player_action = None
    mouse = libtcod.Mouse()
    key = libtcod.Key()
    while not libtcod.console_is_window_closed():
        clear_bg()
        libtcod.console_set_char_background(0, mouse.cx, mouse.cy, libtcod.Color(50,50,50), flag=libtcod.BKGND_SET)
        timeElapsed = libtcod.sys_elapsed_seconds()
        libtcod.sys_check_for_event(libtcod.EVENT_KEY_PRESS | libtcod.EVENT_MOUSE, key, mouse)
        if mouse.lbutton_pressed:
            success = False
            for num in range(len(nodes)):
                x = mouse.cx
                y = mouse.cy
                if nodes[num].isTileMine(x, y):
                    focus = num
                    success = True
                    nodes[focus].click(x, y)
            if success == False:
                focus = -1
        if key.vk == libtcod.KEY_ESCAPE:
            return 0
        if focus != -1:
            if key.vk == libtcod.KEY_BACKSPACE:
                nodes[focus].backspace()
            if key.vk == libtcod.KEY_ENTER:
                nodes[focus].newline()
            if key.vk == libtcod.KEY_UP:
                    nodes[focus].goto(nodes[focus].cursorPosX, nodes[focus].cursorPosY - 1)
            if key.vk == libtcod.KEY_DOWN:
                    nodes[focus].goto(nodes[focus].cursorPosX, nodes[focus].cursorPosY + 1)
            if key.vk == libtcod.KEY_LEFT:
                    nodes[focus].goto(nodes[focus].cursorPosX - 1, nodes[focus].cursorPosY)
            if key.vk == libtcod.KEY_RIGHT:
                    nodes[focus].goto(nodes[focus].cursorPosX + 1, nodes[focus].cursorPosY)
            if chr(key.c) >= chr(32) and chr(key.c) <= chr(126):
                    nodes[focus].addLetter(chr(key.c))
        for element in nodes:
            element.draw()
        libtcod.console_flush()

def init():
    initNodes()
    focus = -1

init()
play_game()
